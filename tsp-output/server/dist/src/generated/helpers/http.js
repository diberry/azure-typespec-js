// Generated by Microsoft TypeSpec
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HttpResponderError_statusCode;
export const HTTP_RESPONDER = Symbol.for("@typespec/http-server-js.HttpResponder");
/**
 * Determines if a value is an HttpResponder.
 * @param value - The value to check.
 * @returns `true` if the value is an HttpResponder, otherwise `false`.
 */
export function isHttpResponder(value) {
    return (typeof value === "object" &&
        value !== null &&
        HTTP_RESPONDER in value &&
        typeof value[HTTP_RESPONDER] === "function");
}
/**
 * An Error that can respond to an HTTP request if thrown from a route handler.
 */
export class HttpResponderError extends Error {
    constructor(statusCode, message) {
        super(message);
        _HttpResponderError_statusCode.set(this, void 0);
        __classPrivateFieldSet(this, _HttpResponderError_statusCode, statusCode, "f");
    }
    [(_HttpResponderError_statusCode = new WeakMap(), HTTP_RESPONDER)](ctx) {
        ctx.response.statusCode = __classPrivateFieldGet(this, _HttpResponderError_statusCode, "f");
        ctx.response.setHeader("Content-Type", "text/plain");
        ctx.response.end(this.message);
    }
}
/**
 * The requested resource was not found.
 */
export class NotFoundError extends HttpResponderError {
    constructor() {
        super(404, "Not Found");
    }
}
/**
 * The request was malformed.
 */
export class BadRequestError extends HttpResponderError {
    constructor() {
        super(400, "Bad Request");
    }
}
/**
 * The request is missing required authentication credentials.
 */
export class UnauthorizedError extends HttpResponderError {
    constructor() {
        super(401, "Unauthorized");
    }
}
/**
 * The request is missing required permissions.
 */
export class ForbiddenError extends HttpResponderError {
    constructor() {
        super(403, "Forbidden");
    }
}
/**
 * The request conflicts with the current state of the server.
 */
export class ConflictError extends HttpResponderError {
    constructor() {
        super(409, "Conflict");
    }
}
/**
 * The server encountered an unexpected condition that prevented it from fulfilling the request.
 */
export class InternalServerError extends HttpResponderError {
    constructor() {
        super(500, "Internal Server Error");
    }
}
/**
 * The server does not support the functionality required to fulfill the request.
 */
export class NotImplementedError extends HttpResponderError {
    constructor() {
        super(501, "Not Implemented");
    }
}
//# sourceMappingURL=http.js.map