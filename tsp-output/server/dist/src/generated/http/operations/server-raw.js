// Generated by Microsoft TypeSpec
import { isHttpResponder as __isHttpResponder_0, HTTP_RESPONDER as __httpResponderSymbol_1, } from "../../helpers/http.js";
import { parseHeaderValueParameters } from "../../helpers/header.js";
export async function widgets_list(__ctx_2, __operations_4) {
    let __result_3;
    try {
        __result_3 = await __operations_4.list(__ctx_2);
    }
    catch (e) {
        if (__isHttpResponder_0(e)) {
            return e[__httpResponderSymbol_1](__ctx_2);
        }
        else
            throw e;
    }
    if ("code" in __result_3) {
        __ctx_2.response.setHeader("content-type", "application/json");
        __ctx_2.response.end(JSON.stringify(__result_3));
    }
    else {
        __ctx_2.response.end();
    }
}
export async function widgets_read(__ctx_6, __operations_8, id) {
    let __result_7;
    try {
        __result_7 = await __operations_8.read(__ctx_6, id);
    }
    catch (e) {
        if (__isHttpResponder_0(e)) {
            return e[__httpResponderSymbol_1](__ctx_6);
        }
        else
            throw e;
    }
    if ("id" in __result_7) {
        __ctx_6.response.setHeader("content-type", "application/json");
        __ctx_6.response.end(JSON.stringify(__result_7));
    }
    else if ("code" in __result_7) {
        __ctx_6.response.setHeader("content-type", "application/json");
        __ctx_6.response.end(JSON.stringify(__result_7));
    }
}
export async function widgets_create(__ctx_10, __operations_12) {
    const __contentType_15 = parseHeaderValueParameters(__ctx_10.request.headers["content-type"]);
    if (__contentType_15?.value !== "application/json") {
        return __ctx_10.errorHandlers.onInvalidRequest(__ctx_10, "/widgets", `unexpected "content-type": '${__contentType_15?.value}', expected '"application/json"'`);
    }
    const __createRequestBody_14 = (await new Promise(function parseCreateRequestBody(resolve, reject) {
        const chunks = [];
        __ctx_10.request.on("data", function appendChunk(chunk) {
            chunks.push(chunk);
        });
        __ctx_10.request.on("end", function finalize() {
            try {
                const body = Buffer.concat(chunks).toString();
                resolve(JSON.parse(body));
            }
            catch {
                __ctx_10.errorHandlers.onInvalidRequest(__ctx_10, "/widgets", "invalid JSON in request body");
                reject();
            }
        });
        __ctx_10.request.on("error", reject);
    }));
    let __result_11;
    try {
        __result_11 = await __operations_12.create(__ctx_10, __createRequestBody_14.id, __createRequestBody_14.weight, __createRequestBody_14.color);
    }
    catch (e) {
        if (__isHttpResponder_0(e)) {
            return e[__httpResponderSymbol_1](__ctx_10);
        }
        else
            throw e;
    }
    if ("id" in __result_11) {
        __ctx_10.response.setHeader("content-type", "application/json");
        __ctx_10.response.end(JSON.stringify(__result_11));
    }
    else if ("code" in __result_11) {
        __ctx_10.response.setHeader("content-type", "application/json");
        __ctx_10.response.end(JSON.stringify(__result_11));
    }
}
export async function widgets_delete(__ctx_16, __operations_18, id) {
    let __result_17;
    try {
        __result_17 = await __operations_18.delete(__ctx_16, id);
    }
    catch (e) {
        if (__isHttpResponder_0(e)) {
            return e[__httpResponderSymbol_1](__ctx_16);
        }
        else
            throw e;
    }
    if (__result_17 === undefined) {
        __ctx_16.response.statusCode = 204;
        __ctx_16.response.end();
    }
    else {
        if ("code" in __result_17) {
            __ctx_16.response.setHeader("content-type", "application/json");
            __ctx_16.response.end(JSON.stringify(__result_17));
        }
    }
}
//# sourceMappingURL=server-raw.js.map