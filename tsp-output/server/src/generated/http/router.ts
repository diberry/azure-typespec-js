// Generated by Microsoft TypeSpec

import * as http from "node:http";

import * as serverRaw from "./operations/server-raw.js";

import { parseHeaderValueParameters } from "../helpers/header.js";

import { Widgets } from "../models/all/widget-service.js";

import {
  RouterOptions,
  createPolicyChain,
  createPolicyChainForRoute,
  HttpContext,
} from "../helpers/router.js";

export interface WidgetServiceRouter {
  /**
   * Dispatches the request to the appropriate service based on the request path.
   *
   * This member function may be used directly as a handler for a Node HTTP server.
   *
   * @param request - The incoming HTTP request.
   * @param response - The outgoing HTTP response.
   */
  dispatch(request: http.IncomingMessage, response: http.ServerResponse): void;

  /**
   * An Express middleware function that dispatches the request to the appropriate service based on the request path.
   *
   * This member function may be used directly as an application-level middleware function in an Express app.
   *
   * If the router does not match a route, it will call the `next` middleware registered with the application,
   * so it is sensible to insert this middleware at the beginning of the middleware stack.
   *
   * @param req - The incoming HTTP request.
   * @param res - The outgoing HTTP response.
   * @param next - The next middleware function in the stack.
   */
  expressMiddleware(
    req: http.IncomingMessage,
    res: http.ServerResponse,
    next: () => void,
  ): void;
}

export function createWidgetServiceRouter(
  widgets: Widgets,
  options: RouterOptions<{
    widgets: Widgets<HttpContext>;
  }> = {},
): WidgetServiceRouter {
  const __onRequestNotFound_20 =
    options.onRequestNotFound ??
    ((ctx) => {
      ctx.response.statusCode = 404;
      ctx.response.setHeader("Content-Type", "text/plain");
      ctx.response.end("Not Found");
    });

  const __onInvalidRequest_21 =
    options.onInvalidRequest ??
    ((ctx, route, error) => {
      ctx.response.statusCode = 400;
      ctx.response.setHeader("Content-Type", "application/json");
      ctx.response.end(JSON.stringify({ error }));
    });

  const __onInternalError_22 =
    options.onInternalError ??
    ((ctx, error) => {
      ctx.response.statusCode = 500;
      ctx.response.setHeader("Content-Type", "text/plain");
      ctx.response.end("Internal server error.");
    });

  const __routePolicies_23 = options.routePolicies ?? {};

  const __routeHandlers_24 = {
    widgets_list: createPolicyChainForRoute(
      "widgetsListDispatch",
      __routePolicies_23,
      "widgets",
      "list",
      serverRaw.widgets_list,
    ),
    widgets_read: createPolicyChainForRoute(
      "widgetsReadDispatch",
      __routePolicies_23,
      "widgets",
      "read",
      serverRaw.widgets_read,
    ),
    widgets_create: createPolicyChainForRoute(
      "widgetsCreateDispatch",
      __routePolicies_23,
      "widgets",
      "create",
      serverRaw.widgets_create,
    ),
    widgets_delete: createPolicyChainForRoute(
      "widgetsDeleteDispatch",
      __routePolicies_23,
      "widgets",
      "delete",
      serverRaw.widgets_delete,
    ),
  } as const;

  const dispatch = createPolicyChain(
    "WidgetServiceRouterDispatch",
    options.policies ?? [],
    async function (ctx, request, response) {
      const url = new URL(request.url!, `http://${request.headers.host}`);
      let path = url.pathname;

      if (path.length === 0) {
        return ctx.errorHandlers.onRequestNotFound(ctx);
      } else if (path.startsWith("/widgets")) {
        path = path.slice(8);
        if (path.length === 0) {
          switch (request.method) {
            case "GET":
              return __routeHandlers_24.widgets_list(ctx, widgets);
            case "POST":
              return __routeHandlers_24.widgets_create(ctx, widgets);
            default:
              return ctx.errorHandlers.onRequestNotFound(ctx);
          }
        } else if (path.startsWith("/")) {
          path = path.slice(1);
          if (path.length === 0) {
            return ctx.errorHandlers.onRequestNotFound(ctx);
          } else {
            let __id_idx = path.indexOf("/");
            __id_idx = __id_idx === -1 ? path.length : __id_idx;
            const id = path.slice(0, __id_idx);
            path = path.slice(__id_idx);
            if (path.length === 0) {
              switch (request.method) {
                case "GET":
                  return __routeHandlers_24.widgets_read(ctx, widgets, id);
                case "DELETE":
                  return __routeHandlers_24.widgets_delete(ctx, widgets, id);
                default:
                  return ctx.errorHandlers.onRequestNotFound(ctx);
              }
            } else {
              return ctx.errorHandlers.onRequestNotFound(ctx);
            }
          }
        }
      }

      return ctx.errorHandlers.onRequestNotFound(ctx);
    },
  );

  const __errorHandlers_25 = {
    onRequestNotFound: __onRequestNotFound_20,
    onInvalidRequest: __onInvalidRequest_21,
    onInternalError: __onInternalError_22,
  };
  return {
    dispatch(request, response) {
      const ctx = { request, response, errorHandlers: __errorHandlers_25 };
      return dispatch(ctx, request, response).catch((e) =>
        __onInternalError_22(ctx, e),
      );
    },
    expressMiddleware: function (request, response, next) {
      const ctx = { request, response, errorHandlers: __errorHandlers_25 };
      void dispatch(
        {
          request,
          response,
          errorHandlers: {
            ...__errorHandlers_25,
            onRequestNotFound: function () {
              next();
            },
          },
        },
        request,
        response,
      ).catch((e) => __onInternalError_22(ctx, e));
    },
  };
}
